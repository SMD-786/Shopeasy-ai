<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Generate stunning AI images using Google's Gemini technology. Create any type of image from text prompts instantly.">
    <title>Gemini Image Generator | AI-Powered Art Creation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4285f4;
            --primary-dark: #357abd;
            --secondary: #34a853;
            --background: #f8f9fa;
            --text: #202124;
            --border-radius: 16px;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Google Sans', Arial, sans-serif;
            line-height: 1.6;
            background: var(--background);
            color: var(--text);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            text-align: center;
            padding: 3rem 0;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--primary);
        }

        .generator-container {
            background: white;
            border-radius: var(--border-radius);
            padding: 2rem;
            box-shadow: var(--shadow);
            margin: 2rem 0;
        }

        .prompt-input {
            width: 100%;
            min-height: 150px;
            padding: 1.5rem;
            border: 2px solid #dfe1e5;
            border-radius: var(--border-radius);
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            resize: vertical;
        }

        .controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        select, input[type="range"] {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid #dfe1e5;
            border-radius: 8px;
        }

        .btn {
            background: var(--primary);
            color: white;
            padding: 1rem 2rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .image-card {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .generated-image {
            width: 100%;
            height: 300px;
            object-fit: cover;
            border-bottom: 1px solid #eee;
        }

        .image-actions {
            padding: 1rem;
            display: flex;
            gap: 0.5rem;
            justify-content: space-between;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Gemini AI Image Generator</h1>
            <p>Transform text into stunning visuals using Google's Gemini technology</p>
        </div>
    </header>

    <main class="container">
        <div class="generator-container">
            <textarea 
                class="prompt-input" 
                placeholder="Describe the image you want to create..."
                id="prompt"
            ></textarea>

            <div class="controls">
                <div class="control-group">
                    <label>Image Style</label>
                    <select id="style">
                        <option value="realistic">Realistic</option>
                        <option value="digital-art">Digital Art</option>
                        <option value="photographic">Photographic</option>
                        <option value="anime">Anime</option>
                        <option value="watercolor">Watercolor</option>
                    </select>
                </div>

                <div class="control-group">
                    <label>Resolution</label>
                    <select id="resolution">
                        <option value="1024x1024">1024x1024</option>
                        <option value="1024x1792">1024x1792 (Portrait)</option>
                        <option value="1792x1024">1792x1024 (Landscape)</option>
                    </select>
                </div>

                <div class="control-group">
                    <label>Number of Images (1-4)</label>
                    <input 
                        type="range" 
                        id="count" 
                        min="1" 
                        max="4" 
                        value="1"
                    >
                    <span id="count-value">1</span>
                </div>
            </div>

            <button class="btn" id="generate-btn">
                <i class="fas fa-magic"></i> Generate Images
            </button>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Generating your images...</p>
            </div>

            <div class="gallery" id="gallery"></div>
        </div>
    </main>

    <script>
        
        const GEMINI_API_KEY = 'AIzaSyD5bb4_MLG3Ig5u7UfbaAM1PiU6RuoxXks'; // Get from Google AI Studio
        const API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

        const elements = {
            // ... previous element references ...
            status: document.getElementById('status')
        };

        async function generateImages() {
            const prompt = elements.prompt.value.trim();
            if (!prompt) {
                showError('Please enter a description');
                return;
            }

            elements.loading.style.display = 'block';
            elements.gallery.innerHTML = '';
            elements.status.textContent = '';

            try {
                const requestBody = {
                    contents: [{
                        parts: [{
                            text: `Generate ${elements.count.value} ${elements.style.value} images in ${elements.resolution.value} resolution. 
                                  The images should depict: ${prompt}. 
                                  Provide real image URLs in markdown format.`
                        }]
                    }]
                };

                const response = await fetch(`${API_ENDPOINT}?key=${GEMINI_API_KEY}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });

                const data = await response.json();
                if (!response.ok) {
                    throw new Error(data.error?.message || 'API request failed');
                }

                const images = extractImageUrls(data);
                if (images.length === 0) throw new Error('No images generated');
                
                await displayImages(images);
                showSuccess(`${images.length} images generated successfully!`);

            } catch (error) {
                console.error('Generation error:', error);
                showError(`Failed to generate images: ${error.message}`);
            } finally {
                elements.loading.style.display = 'none';
            }
        }

        function extractImageUrls(response) {
            // Parse Gemini's markdown response for image URLs
            try {
                const markdown = response.candidates[0].content.parts[0].text;
                return [...markdown.matchAll(/!\[.*?\]\((.*?)\)/g)]
                       .map(match => ({ url: match[1] }));
            } catch (e) {
                throw new Error('Failed to parse API response');
            }
        }

        async function displayImages(images) {
            elements.gallery.innerHTML = await Promise.all(images.map(async (img, index) => {
                const valid = await verifyImage(img.url);
                if (!valid) return '';
                
                return `
                    <div class="image-card">
                        <img src="${img.url}" alt="Generated image ${index + 1}" 
                             class="generated-image" loading="lazy">
                        <div class="image-actions">
                            <a href="${img.url}" download="gemini-image-${Date.now()}-${index}.png" 
                               class="btn" target="_blank">
                                <i class="fas fa-download"></i> Download
                            </a>
                        </div>
                    </div>
                `;
            })).then(html => html.join(''));
        }

        async function verifyImage(url) {
            try {
                const response = await fetch(url, { method: 'HEAD' });
                return response.ok;
            } catch (error) {
                return false;
            }
        }

        function showError(message) {
            elements.status.textContent = message;
            elements.status.style.color = 'var(--danger)';
        }

        function showSuccess(message) {
            elements.status.textContent = message;
            elements.status.style.color = 'var(--success)';
        }

        // Add CORS proxy option for development
        async function fetchWithCorsProxy(url) {
            const proxyUrl = 'https://cors-anywhere.herokuapp.com/';
            try {
                const response = await fetch(proxyUrl + url);
                return response;
            } catch (error) {
                throw new Error('Failed to fetch through CORS proxy');
            }
        }

    </script>
</body>
</html>